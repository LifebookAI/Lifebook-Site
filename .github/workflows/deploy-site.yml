name: Deploy site (S3 + CloudFront)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "src/**"
      - "public/**"
      - "package.json"
      - "package-lock.json"
      - "vite.config.*"
      - ".github/workflows/deploy-site.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "src/**"
      - "public/**"
      - "package.json"
      - "package-lock.json"
      - "vite.config.*"
      - ".github/workflows/deploy-site.yml"

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  S3_BUCKET: lifebook.ai
  SITE_DIR: dist
  CF_DIST_ID: ${{ vars.CF_DIST_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug OIDC token (sub/aud)
        uses: actions/github-script@v7
        with:
          script: |
            const token = await core.getIDToken('sts.amazonaws.com');
            const body = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString('utf8'));
            core.info(`OIDC aud: ${JSON.stringify(body.aud)}`);
            core.info(`OIDC sub: ${body.sub}`);

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: lifebook-site-deploy
          output-env-credentials: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          if [ -f pnpm-lock.yaml ]; then
            corepack enable || true
            corepack prepare pnpm@latest --activate || true
            pnpm --version || true
            pnpm install --frozen-lockfile
          elif [ -f yarn.lock ]; then
            corepack enable || true
            corepack prepare yarn@stable --activate || true
            yarn -v || true
            yarn install --immutable
          elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          elif [ -f package.json ]; then
            npm install --no-audit --no-fund
          else
            echo "No package.json found; nothing to install."
          fi
      - name: Lint
        run: npm run lint -- --max-warnings=0

      - name: Type check
        run: npm run typecheck
      - name: Build site
        shell: bash
        env:
          SITE_DIR: ${{ env.SITE_DIR }}
        run: |
          set -euo pipefail
          echo "Node: $(node -v || true)  npm: $(npm -v || true)"
          echo "corepack: $(corepack --version || true)"
          ls -la || true

          # Pick package manager by lockfile
          if [ -f pnpm-lock.yaml ]; then
            corepack enable || true
            corepack prepare pnpm@latest --activate || true
            echo "Using pnpm"
            pnpm --version || true
            pnpm install --frozen-lockfile
            pnpm build || { echo "::error title=Build failed::pnpm build failed"; exit 1; }
          elif [ -f yarn.lock ]; then
            corepack enable || true
            corepack prepare yarn@stable --activate || true
            echo "Using yarn"
            yarn -v || true
            yarn install --immutable
            yarn build || { echo "::error title=Build failed::yarn build failed"; exit 1; }
          elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            echo "Using npm ci"
            npm ci
            npm run build || { echo "::error title=Build failed::npm run build failed"; exit 1; }
          elif [ -f package.json ]; then
            echo "Using npm install"
            npm install --no-audit --no-fund
            npm run build || { echo "::error title=Build failed::npm run build failed"; exit 1; }
          else
            echo "::warning title=No package.json::No build to run; skipping"
          fi

          # If this is a Next.js app, export static site to ${SITE_DIR} (S3 compatible)
          if [ -f package.json ] && grep -q '"next"' package.json; then
            echo "Detected Next.js – exporting static site to ${SITE_DIR}…"
            npx --yes next export -o "${SITE_DIR}"
          fi

          # Verify output dir exists
          if [ ! -d "${SITE_DIR}" ]; then
            echo "::warning title=Build output missing::${SITE_DIR} not found after build"
          else
            echo "Built artifacts (top):"
            find "${SITE_DIR}" -maxdepth 2 -type f | head -n 80 || true
          fi



