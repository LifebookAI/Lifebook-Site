name: Deploy site (S3 + CloudFront)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "${SITE_DIR}/**"
      - ".github/workflows/deploy-site.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "${SITE_DIR}/**"
      - ".github/workflows/deploy-site.yml"

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  S3_BUCKET: lifebook.ai
  SITE_DIR: dist
  CF_DIST_ID: ${{ vars.CF_DIST_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug OIDC token (sub/aud)
        uses: actions/github-script@v7
        with:
          script: |
            const token = await core.getIDToken('sts.amazonaws.com');
            const body = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString('utf8'));
            core.info(`OIDC aud: ${JSON.stringify(body.aud)}`);
            core.info(`OIDC sub: ${body.sub}`);

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: lifebook-site-deploy
      - name: Verify inputs
        shell: bash
        run: |
          set -euo pipefail
          test -n "${CF_DIST_ID}" || (echo "::error title=Missing var::CF_DIST_ID repo variable is not set"; exit 1)
          test -n "${S3_BUCKET}"   || (echo "::error title=Missing env::S3_BUCKET is not set"; exit 1)

      - name: Sync assets (immutable)
        shell: bash
        env:
          S3_BUCKET: ${{ env.S3_BUCKET }}
          SITE_DIR: dist env.SITE_DIR }}
        run: |
          set -euo pipefail
          shopt -s globstar nullglob

          echo "Listing ${SITE_DIR} (top 2 levels):"
          (find "${SITE_DIR}" -maxdepth 2 -type f | head -n 50) || true

          has_any=0
          for pat in "*.css" "*.js" "*.mjs" "*.map" "*.svg" "*.png" "*.jpg" "*.jpeg" "*.webp" "*.gif" "assets/*"; do
            if compgen -G "${SITE_DIR}/${pat}" > /dev/null; then
              echo "Found files for pattern: ${pat}"
              has_any=1; break
            fi
          done
          if [[ "${has_any}" -eq 0 ]]; then
            echo "::notice title=No immutable assets::Skipping asset upload; no matching files under ${SITE_DIR}"
            exit 0
          fi

          echo "Uploading hashed/static assets with long immutable caching…"
          aws s3 cp "${SITE_DIR}/" "s3://${S3_BUCKET}/" --recursive \
            --exclude "*" --include "*.css" --include "*.js" --include "*.mjs" --include "*.map" \
            --include "*.svg" --include "*.png" --include "*.jpg" --include "*.jpeg" --include "*.webp" --include "*.gif" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable" \
            --sse AES256

          echo "Uploading assets/ subtree with immutable caching (if present)…"
          aws s3 cp "${SITE_DIR}/" "s3://${S3_BUCKET}/" --recursive \
            --exclude "*" --include "assets/*" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable" \
            --sse AES256

      - name: Upload HTML (no-store)
        shell: bash
        env:
          S3_BUCKET: ${{ env.S3_BUCKET }}
          SITE_DIR: dist env.SITE_DIR }}
        run: |
          set -euo pipefail
          if [[ ! -f "${SITE_DIR}/index.html" ]]; then
            echo "::warning title=No index.html::Skipping HTML upload; ${SITE_DIR}/index.html not found"
            exit 0
          fi
          aws s3 cp "${SITE_DIR}/index.html" "s3://${S3_BUCKET}/index.html" \
            --content-type "text/html; charset=utf-8" \
            --metadata-directive REPLACE \
            --cache-control "no-store" \
            --sse AES256

      - name: Invalidate CloudFront
        if: ${{ env.CF_DIST_ID != '' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Creating CloudFront invalidation for distribution ${CF_DIST_ID}…"
          aws cloudfront create-invalidation --distribution-id "${CF_DIST_ID}" --paths "/*"

